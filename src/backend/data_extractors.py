"""Add classes of data extractors for different surveys/tables/programs here."""

from typing import IO, Dict, List

import pandas as pd


class ExitEmbaExtractor:
    def __init__(self, table_path: str | IO):
        self.df = pd.read_excel(table_path)

    # below are methods for extracting data, used in piecharts
    def get_age_distr(self, age_Qind: int = 15):
        age_groups = {
            1.0: "18-24",
            2.0: "25-34",
            3.0: "35-44",
            4.0: "45-54",
            5.0: "55+",
        }
        age_counts = self.df[f"Q{age_Qind} üî¥  –£–∫–∞–∂–∏—Ç–µ –≤–∞—à  –≤–æ–∑—Ä–∞—Å—Ç"].value_counts()
        age_counts.index = age_counts.index.to_series().map(age_groups)
        age_counts = age_counts.to_dict()
        return age_counts

    def get_industry_distr(self, industry_Qind: int = 14):
        industry_codes = {
            1: "–°—Ä–µ–¥—Å—Ç–≤–∞ –º–∞—Å—Å–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è",
            2: "–ó–¥—Ä–∞–≤–æ–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ",
            3: "–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ",
            4: "–ù–µ–∫–æ–º–º–µ—Ä—á–µ—Å–∫–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏, –Ω–µ–ø—Ä–∞–≤–∏—Ç–µ–ª—å—Å—Ç–≤–µ–Ω–Ω—ã–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏",
            5: "–ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–π —Å–µ–∫—Ç–æ—Ä",
            6: "–ö–æ–Ω—Å–∞–ª—Ç–∏–Ω–≥",
            7: "–ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å",
            8: "–§–∏–Ω–∞–Ω—Å—ã",
            9: "–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏",
            10: "–û—Ç–µ–ª–∏, –†–µ—Å—Ç–æ—Ä–∞–Ω—ã, –ö–µ–π—Ç–µ—Ä–∏–Ω–≥",
            11: "–õ–æ–≥–∏—Å—Ç–∏–∫–∞",
            12: "–¢–æ–≤–∞—Ä—ã –Ω–∞—Ä–æ–¥–Ω–æ–≥–æ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è",
            13: "–¢–æ—Ä–≥–æ–≤–ª—è",
            14: "–°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ",
            15: "–≠–Ω–µ—Ä–≥–µ—Ç–∏–∫–∞",
            16: "–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ",
            17: "–î–æ–±—ã—á–∞ –ø–æ–ª–µ–∑–Ω—ã—Ö –∏—Å–∫–æ–ø–∞–µ–º—ã—Ö",
            18: "–°–µ–ª—å—Å–∫–æ–µ —Ö–æ–∑—è–π—Å—Ç–≤–æ",
            19: "–î—Ä—É–≥–æ–µ",
        }
        industry_col = [
            col
            for col in self.df.columns
            if col.startswith(f"Q{industry_Qind}") and self.df[col].dtype == "int64"
        ][0]
        industry_counts = self.df[industry_col].value_counts()
        industry_counts.index = industry_counts.index.to_series().map(industry_codes)
        industry_counts = industry_counts.to_dict()
        return industry_counts

    def get_job_distr(self, job_Qinds: int = 13):
        job_cols = [
            col
            for col in self.df.columns
            if col.startswith(f"Q{job_Qinds}") and self.df[col].dtype == "int64"
        ]
        jobs_counts = self.df[job_cols].sum()
        jobs_counts = jobs_counts[jobs_counts > 0].sort_values(ascending=False)
        jobs_counts = jobs_counts.to_dict()
        return jobs_counts

    # below are methods for extracting data, used in boxplots
    def get_overall_csi(self, csi_Qinds: List[int] = [2, 3, 5, 7, 8, 9]):
        new_colnames = [
            "–û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞<br>–ø—Ä–æ–≥—Ä–∞–º–º—ã (Q2)",
            "–ù–∞—Å–∫–æ–ª—å–∫–æ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç—ã<br>—Ü–µ–ª–∏ –æ–±—É—á–µ–Ω–∏—è (Q3)",
            "–î–∏–∑–∞–π–Ω<br>–ø—Ä–æ–≥—Ä–∞–º–º—ã (Q5)",
            "–û–ø—ã—Ç –Ω–∞<br>–º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã—Ö<br>–º–æ–¥—É–ª—è—Ö (Q7)",
            "–†–∞–±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥—ã<br>–ø—Ä–æ–≥—Ä–∞–º–º—ã (Q8)",
            "–ö–∞—á–µ—Å—Ç–≤–æ –≥—Ä—É–ø–ø—ã (Q9)",
        ]

        discrete_rate_cols = []
        for i in csi_Qinds:
            discrete_rate_cols.append(
                [col for col in self.df.columns if col.startswith(f"Q{i}")]
            )

        csi_data = {}
        for name, col in zip(new_colnames, discrete_rate_cols):
            mean_series = self.df[col].mean(axis=1)
            csi_data[name] = mean_series
        return csi_data

    def calulate_csi(self, csi_data: Dict[str, List[float]]):
        component_csis = []
        for value in list(csi_data.values()):
            component_csis.append(sum(value) / len(value))
        return sum(component_csis) / len(component_csis)

    def _get_csi(self, new_colnames: List[str], csi_Qind: int):
        csi_cols = [col for col in self.df.columns if col.startswith(f"Q{csi_Qind}")]
        ratings = [self.df[col] for col in csi_cols]
        csi_data = dict(zip(new_colnames, ratings))
        return csi_data

    def get_basic_csi(self, csi_Qind: int = 2):
        new_colnames = [
            "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è<br>–ø–æ–¥–¥–µ—Ä–∂–∫–∞",
            "–ü—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–Ω—ã–µ<br>–∑–Ω–∞–Ω–∏—è",
            "–ü–ü–°",
        ]
        return self._get_csi(new_colnames, csi_Qind)

    def get_design_csi(self, csi_Qind: int = 5):
        new_colnames = [
            "–õ–æ–≥–∏—á–Ω–æ—Å—Ç—å<br>—Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è",
            "–ë–∞–ª–∞–Ω—Å —Ç–µ–æ—Ä–∏–∏<br>–∏ –ø—Ä–∞–∫—Ç–∏–∫–∏",
            "–ü—Ä–∏–º–µ–Ω–∏–º–æ—Å—Ç—å<br>–∑–Ω–∞–Ω–∏–π",
            "–ê–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å<br>–∑–Ω–∞–Ω–∏–π",
            "–°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ<br>–≥–ª–æ–±–∞–ª—å–Ω—ã—Ö<br>–∏ —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã—Ö<br>–º–æ–¥—É–ª–µ–π",
            "–î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç—å<br>–ø—Ä–æ–µ–∫—Ç–Ω–æ–π<br>—Ä–∞–±–æ—Ç—ã",
            "–ö–∞—á–µ—Å—Ç–≤–æ<br>–≤—ã—Å—Ç—É–ø–∞—é—â–∏—Ö",
        ]
        return self._get_csi(new_colnames, csi_Qind)

    def get_intern_modules_csi(self, csi_Qind: int = 7):
        new_colnames = [
            "–ö–∞—á–µ—Å—Ç–≤–æ<br>–∫–µ–π—Å–æ–≤",
            "–ü—Ä–∏–º–µ–Ω–∏–º–æ—Å—Ç—å<br>–∑–Ω–∞–Ω–∏–π",
            "–ì—Ä—É–ø–ø–æ–≤–∞—è<br>—Ä–∞–±–æ—Ç–∞",
            "–í—ã–±–æ—Ä<br>–ª–æ–∫–∞—Ü–∏–π",
        ]
        return self._get_csi(new_colnames, csi_Qind)

    def get_support_csi(self, csi_Qind: int = 8):
        new_colnames = [
            "–û—Ç–∫–ª–∏–∫<br>–Ω–∞ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏",
            "–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è<br>–æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–æ–≥–æ<br>–ø—Ä–æ—Ü–µ—Å—Å–∞",
        ]
        return self._get_csi(new_colnames, csi_Qind)

    def get_group_csi(self, csi_Qind: int = 9):
        new_colnames = [
            "–ü–æ–¥–¥–µ—Ä–∂–∫–∞\n–∏ –≤–∑–∞–∏–º–æ–ø–æ–º–æ—â—å",
            "–û–ø—ã—Ç –∏ –∑–Ω–∞–Ω–∏—è\n–æ–¥–Ω–æ–≥—Ä—É–ø–ø–Ω–∏–∫–æ–≤",
            "–†–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ\n–∏–Ω–¥—É—Å—Ç—Ä–∏–π",
            "–ü—Ä–∏–æ–±—Ä–∏—Ç–µ–Ω–∏–µ\n–¥–µ–ª–æ–≤—ã—Ö\n–∫–æ–Ω—Ç–∞–∫—Ç–æ–≤",
        ]
        return self._get_csi(new_colnames, csi_Qind)

    # below are methods for extracting data, used in barplots
    def _get_program_nps(self, nps_Qind: str = "12.1") -> int:
        nps_colname = f"Q{nps_Qind}  - üî¥  –ì–æ—Ç–æ–≤—ã –ª–∏ –≤—ã –ø–æ—Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É —Å–≤–æ–∏–º –¥—Ä—É–∑—å—è–º/–∫–æ–ª–ª–µ–≥–∞–º?"
        num_students = self.df.shape[0]
        num_promoters = self.df[self.df[nps_colname] >= 9].shape[0]
        num_critics = self.df[self.df[nps_colname] <= 6].shape[0]
        nps_value = int((num_promoters - num_critics) / num_students * 100)
        return nps_value

    def get_industry_nps(self):
        nps_value = self._get_program_nps()
        labels = [
            "–£—Ä–æ–≤–µ–Ω—å '–û—Ç–ª–∏—á–Ω–æ'\n by Quesionstar",
            "EMBA-35",
            "–°—Ñ–µ—Ä–∞ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è",
            "–°—Ñ–µ—Ä–∞ –≤—ã—Å—à–µ–≥–æ\n–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è",
        ]
        values = [30, nps_value, 42, 51]
        colors = ["#A9A9A9"] * len(values)
        colors[1] = "#FF007F"
        return labels, values, colors

    def get_programs_nps(self):
        nps_value = self._get_program_nps()
        labels = [
            "EMBA-31+32",
            "EMBA-33",
            "EMBA-34",
            "EMBA-35",
            "SKOLKOVO DEGREE",
            "SKOLKOVO EMBA average",
        ]
        values = [57, 47, 51, nps_value, 65, 77]
        colors = ["#A9A9A9"] * len(values)
        colors[3] = "#FF007F"
        return labels, values, colors

    def get_pilos(self, nps_Qind: str = 3):
        q3_cols = [col for col in self.df.columns if col.startswith(f"Q{nps_Qind}")]
        new_colnames = [
            "–≠–∫—Å–ø–µ—Ä—Ç–Ω—ã–π<br>—É—Ä–æ–≤–µ–Ω—å –∑–Ω–∞–Ω–∏—è<br>–±–∏–∑–Ω–µ—Å-–¥–∏—Å—Ü–∏–ø–ª–∏–Ω",
            "–ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö<br>–¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è<br>—Ä–µ—à–µ–Ω–∏–π",
            "–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ<br>—Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –¥–ª—è<br>—É—Å—Ç–æ–π—á–∏–≤–æ–≥–æ<br>—Ä–∞–∑–≤–∏—Ç–∏—è",
            "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–µ<br>–ª–∏–¥–µ—Ä—Å—Ç–≤–æ",
            "–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–∞—è<br>–∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è",
            "–°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ<br>—Å—Ç—Ä–∞—Ç–µ–≥–∏–π",
            "–û—Ü–µ–Ω–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞<br>–∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π",
            "–í–Ω–µ–¥—Ä–µ–Ω–∏–µ<br>ERS",
            "–ö—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å<br>–Ω–æ–≤–∞—Ç–æ—Ä—Å—Ç–≤–æ",
            "–ü—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å—Å–∫–æ–µ<br>–º—ã—à–ª–µ–Ω–∏–µ",
        ]
        PILOs_df = self.df[q3_cols]
        PILOs_df.columns = new_colnames
        PILOs_df = PILOs_df.astype(int)
        PILOs_df = PILOs_df.melt(var_name="param", value_name="score")
        score_counts = (
            PILOs_df.groupby(["param", "score"])
            .size()
            .unstack(fill_value=0)
            .reindex(columns=range(1, 11), fill_value=0)
        ).reset_index()
        return score_counts

    def get_top_lectors(self, lectors_Qind: int = 6) -> Dict[str, int]:
        lectors_cols = [
            col for col in self.df.columns if col.startswith(f"Q{lectors_Qind}")
        ]
        all_lectors = self.df[lectors_cols]
        mask_all_zeros = (all_lectors == 0).all(axis=1)
        zeros_count = mask_all_zeros.sum()
        lectors = all_lectors.loc[~mask_all_zeros, lectors_cols].values.flatten()
        lectors = [lector for lector in lectors if lector != 0]
        lectors_counts = pd.Series(lectors).value_counts()
        lectors_counts["–ù–∏–∫—Ç–æ"] = zeros_count
        lectors_counts = lectors_counts.sort_values(ascending=True).to_dict()
        return lectors_counts

    def get_collaborators(self, collab_Qind: int = 11) -> Dict[str, int]:
        new_colnames = [
            "–∫–∞—á–µ—Å—Ç–≤–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ —Å–ø–∏–∫–µ—Ä–∞",
            "–∫–∞—á–µ—Å—Ç–≤–µ –º–µ–Ω—Ç–æ—Ä–∞",
            "–º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö –¥–ª—è –≤—ã–ø—É—Å–∫–Ω–∏–∫–æ–≤",
            "–∞–¥–º–∏—Å—Å–∏–∏",
            "–¥—Ä—É–≥–æ–µ",
            "–≤ –∫–∞—á–µ—Å—Ç–≤–µ –ø—Ä–æ—Ç–∞–≥–æ–Ω–∏—Å—Ç–∞",
            "–æ—Ç–∫–∞–∑—ã–≤–∞—é—Å—å",
        ]
        events_cols = [
            col
            for col in self.df.columns
            if col.startswith(f"Q{collab_Qind}")
            and not col.startswith(f"Q{collab_Qind}.1.")
        ]
        all_events = self.df[events_cols].replace("No comments", False).astype(bool)
        all_events["–û—Ç–∫–∞–∑—ã–≤–∞—é—Å—å"] = (~all_events).all(axis=1)
        all_events.columns = new_colnames

        events_counts = {}
        for col in new_colnames:
            events_counts[col] = all_events[col].sum()
        events_counts = pd.Series(events_counts).sort_values(ascending=True).to_dict()
        return events_counts
